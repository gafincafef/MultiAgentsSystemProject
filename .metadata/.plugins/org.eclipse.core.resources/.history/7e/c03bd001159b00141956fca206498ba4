package edu.rits.ma.jade.behaviour;

import jade.core.Agent;
import jade.core.behaviours.Behaviour;

import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

import edu.rits.ma.common.abstr.ITask;
import edu.rits.ma.jade.communication.TaskProcessorIntermediator;

public class TaskProcessorMainBehaviour extends Behaviour {

	private static final long serialVersionUID = 3398155524074335278L;

	private TaskProcessorIntermediator mIntermediator = null;
	private Deque<ITask> mTasks;

	public TaskProcessorMainBehaviour(Agent agent, TaskProcessorIntermediator intermediator) {
		super();
		mIntermediator = intermediator;
		setAgent(agent);
	}

	@Override
	public void action() {
		int newState = process(mIntermediator);
		mIntermediator.setState(newState);
	}

	@Override
	public boolean done() {
		return mIntermediator.getState() == TaskProcessorIntermediator.STATE_TO_STOP;
	}

	public int process(TaskProcessorIntermediator intermediator) {
		int newState = 0;
		switch (intermediator.getState()) {
		case TaskProcessorIntermediator.STATE_WAIT_FOR_SECONDARY_AGENT_START:

			break;
		case TaskProcessorIntermediator.STATE_TO_RUN_TASK:
			doExecuteTask();
			break;
		case TaskProcessorIntermediator.STATE_MESSAGE_RECEIVED_FROM_SECONDARY_AGENT:

			break;
		case TaskProcessorIntermediator.STATE_WAIT_FOR_SECONDARY_AGENT_FINISH:
			doWait();
			break;
		default:
			break;
		}
		return newState;
	}

	private int doExecuteTask() {
		if(!mTasks.isEmpty()) {
			ITask task = mTasks.pop();
			task.execute();
			if(task.getStatus() == ITask.TASK_STATUS_SUCCEEDED) {
				List<ITask> subTasks = new ArrayList<ITask>();

				//Each task spawns a list of sub task after finished
				task.createSubTasks(subTasks);

				for(int i = 0; i < subTasks.size(); i++) {
					//int secondaryAgentIndex = i;//TODO Tweak this logic. There may be different between sub task id and secondary agent id 
					//assignSubTaskForSecondaryAgent(mSecondaryAgentControllers.get(secondaryAgentIndex), subTasks.get(i));
				}
			}
			
			if(mTasks.isEmpty()) {
				mIntermediator.setState(TaskProcessorIntermediator.STATE_WAIT_FOR_SECONDARY_AGENT_FINISH);
			}
		}
	}
	
	private void doWait() {
		try {
			Thread.sleep(20);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
