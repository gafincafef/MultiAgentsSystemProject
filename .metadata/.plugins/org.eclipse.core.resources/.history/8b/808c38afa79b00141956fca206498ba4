package edu.rits.ma.jade.behaviour;

import jade.lang.acl.ACLMessage;

import java.util.ArrayList;
import java.util.List;

import edu.rits.ma.common.abstr.ITask;
import edu.rits.ma.jade.communication.CommunicationDataStore;
import edu.rits.ma.jade.communication.InProcessObjectMessage;

public class PrimaryTaskProcessorImpl implements ICommunicationDataStoreProcessor {

	private static final int ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_READY = 0;
	private static final int ACTION_PHASE_TO_PROCESS_READY_MESSAGE = 1;
	private static final int ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_DONE_TASK = 3;
	private static final int ACTION_PHASE_TO_PROCESS_TASK_DONE_MESSAGE = 4;
	private static final int ACTION_PHASE_TO_STOP = 5;

	private int mInternalState = ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_READY;
	private List<ITask> mTasks = null;
	private List<String> mSecondaryAgentNames = null;

	private int mNumberOfSecondaryAgentNotReady = 0;
	private int mNumberOfSecondaryAgentNotDoneTask = 0;
	
	public PrimaryTaskProcessorImpl(List<ITask> tasks, List<String> secondaryAgentNames) {
		mTasks = tasks;
		mSecondaryAgentNames = secondaryAgentNames;
		mNumberOfSecondaryAgentNotReady = mSecondaryAgentNames.size();
		mNumberOfSecondaryAgentNotDoneTask = mSecondaryAgentNames.size();
	}
	
	@Override
	public void processCommunicationDataStore(CommunicationDataStore communicationDataStore) {
		updateInternalState(communicationDataStore);
		try {
			int nextActionPhase = mInternalState;
			switch (mInternalState) {
			case ACTION_PHASE_TO_PROCESS_READY_MESSAGE:
				nextActionPhase = onReadyMessage(communicationDataStore);
				break;
			case ACTION_PHASE_TO_PROCESS_TASK_DONE_MESSAGE:
				nextActionPhase = onTaskDoneMessage(communicationDataStore);
				break;
			default:
				break;
			}
			mInternalState = nextActionPhase;
		} catch (Exception e) {
			e.printStackTrace();
			mInternalState = ACTION_PHASE_TO_STOP;
		}
	}
	
	@Override
	public boolean done() {
		return mInternalState == ACTION_PHASE_TO_STOP;
	}

	private void updateInternalState(CommunicationDataStore communicationDataStore) {
		if(communicationDataStore.getState() == CommunicationDataStore.STATE_MESSAGE_RECEIVED) {
			ACLMessage message = communicationDataStore.extractMessageToSend();
			mInternalState = detectStateByReceivedMessage(message); 
		}
	}

	private int onReadyMessage(CommunicationDataStore communicationDataStore) {
		if(allSecondaryAgentReady()) {
			runTasks(communicationDataStore);
			return ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_DONE_TASK;
		}
		return ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_READY;
	}
	
	private boolean allSecondaryAgentReady() {
		return mNumberOfSecondaryAgentNotReady > 0;
	}

	private int onTaskDoneMessage(CommunicationDataStore communicationDataStore) {
		if(allSecondaryAgentDoneTask()) {
			return ACTION_PHASE_TO_STOP;
		}
		return ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_DONE_TASK;
	}

	private boolean allSecondaryAgentDoneTask() {
		return mNumberOfSecondaryAgentNotDoneTask > 0;
	}

	private void runTasks(CommunicationDataStore communicationDataStore) {
		for(ITask task : mTasks) {
			//Firstly execute the task assigned to primary agent
			task.execute();

			if(task.getStatus() == ITask.TASK_STATUS_SUCCEEDED) {
				List<ITask> subTasks = new ArrayList<ITask>();

				//Each task spawns a list of sub task after finished
				task.createSubTasks(subTasks);

				for(int i = 0; i < subTasks.size(); i++) {
					int secondaryAgentIndex = i; 

					//Add task object to secondary agents by adding task to queue
					assignTaskToSecondaryAgent(mSecondaryAgentNames.get(secondaryAgentIndex), subTasks.get(i));
				}
			}
		}
	}
	
	private void assignTaskToSecondaryAgent(String secondaryAgentName, ITask task) {
		InProcessObjectMessage objectMessage = new InProcessObjectMessage();
		objectMessage.setObject(task);
		objectMessage.setTargetAgentName(secondaryAgentName);
	}
	
	private int detectStateByReceivedMessage(ACLMessage message) {
		//TODO Implement
		return ACTION_PHASE_TO_PROCESS_READY_MESSAGE;
	}
}
