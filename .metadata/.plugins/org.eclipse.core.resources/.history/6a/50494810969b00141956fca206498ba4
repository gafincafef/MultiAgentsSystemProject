package edu.rits.ma.jade.behaviour;

import jade.util.ObjectManager;

import java.util.ArrayList;
import java.util.List;

import edu.rits.ma.common.abstr.ITask;
import edu.rits.ma.jade.communication.CommunicationDataStore;
import edu.rits.ma.jade.communication.InProcessObjectMessage;

public class PrimaryTaskProcessorImpl implements ICommunicationDataStoreProcessor {

	private static final int ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_READY = 0;
	private static final int ACTION_PHASE_TO_PROCESS_READY_MESSAGE = 1;
	private static final int ACTION_PHASE_TO_RUN = 2;
	private static final int ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_DONE_TASK = 3;
	private static final int ACTION_PHASE_TO_PROCESS_TASK_DONE_MESSAGE = 4;
	private static final int ACTION_PHASE_TO_STOP = 5;
	
	private int mInternalState = ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_READY;
	private List<ITask> mTasks = null;
	private List<String> mSecondaryAgentNames = null;
	
	@Override
	public void processCommunicationDataStore(CommunicationDataStore communicationDataStore) {
		updateInternalState(communicationDataStore);
		try {
			int nextActionPhase = mInternalState;
			switch (mInternalState) {
			case ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_READY:
				break;
			case ACTION_PHASE_TO_PROCESS_READY_MESSAGE:
				break;
			case ACTION_PHASE_TO_RUN:
				runTasks(communicationDataStore);
				nextActionPhase = ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_DONE_TASK;
				break;
			case ACTION_PHASE_TO_WAIT_SECONDARY_AGENTS_DONE_TASK:
				waitForSubTasksOnSecondaryAgents();
				break;
			case ACTION_PHASE_TO_PROCESS_TASK_DONE_MESSAGE:
				break;
			default:
				break;
			}
			mInternalState = nextActionPhase;
		} catch (Exception e) {
			e.printStackTrace();
			mInternalState = ACTION_PHASE_TO_STOP;
		}
	}

	private void updateInternalState(CommunicationDataStore communicationDataStore) {
		
	}

	private void waitForSubTasksOnSecondaryAgents() {
		// TODO Auto-generated method stub
		
	}

	private void runTasks(CommunicationDataStore communicationDataStore) {
		for(ITask task : mTasks) {
			//Firstly execute the task assigned to primary agent
			task.execute();

			if(task.getStatus() == ITask.TASK_STATUS_SUCCEEDED) {
				List<ITask> subTasks = new ArrayList<ITask>();

				//Each task spawns a list of sub task after finished
				task.createSubTasks(subTasks);

				for(int i = 0; i < subTasks.size(); i++) {
					int secondaryAgentIndex = i;//TODO Tweak this logic. There may be different between sub task id and secondary agent id 
					
					//Add task object to secondary agents by adding task to queue
					assignTaskToSecondaryAgent(mSecondaryAgentNames.get(secondaryAgentIndex), subTasks.get(i));
				}
			}
		}
	}

}
