package edu.rits.ma.jade.agent;

import jade.core.behaviours.Behaviour;
import jade.wrapper.AgentController;
import jade.wrapper.StaleProxyException;
import jade.wrapper.gateway.GatewayAgent;

import java.util.ArrayList;
import java.util.List;

import edu.rits.ma.jade.concurrency.CondVar;
import edu.rits.ma.jade.concurrency.CondVarManager;
import edu.rits.ma.jade.concurrency.ICondVarAcquirer;
import edu.rits.ma.jade.concurrency.ICondVarReleaser;
import edu.rits.ma.jade.util.LogUtil;

public abstract class AbstractPrimaryAgent extends GatewayAgent implements IAgentProtocol {

	private static final long serialVersionUID = 4166260446398994126L;
	private static final String SECONDARY_AGENT_NAME_PREFIX = "SecondaryAgent";
	
	private CondVar mCondVarToRelease = null;
	
	protected List<AgentController> mSecondaryAgentControllers = new ArrayList<AgentController>();

	@Override
	protected void setup() {
		super.setup();
		AgentOrganizer setupOrganizer = new AgentOrganizer();
		setupOrganizer.setupAgentAndNotify(this, new CondVarManager());
	}

	@Override
	protected void processCommand(java.lang.Object command) {
		addBehaviour(createBehaviourForCommand(command));
	}

	@Override
	protected void takeDown() {
		cleanSecondaryAgents();
		super.takeDown();
	}

	@Override
	public void onSetupStart() {
		LogUtil.logInfo(this, "Setup called on primary agent " + getAID().getLocalName()
				+ " in container " + getAMS().getName());
		setEnabledO2ACommunication(true, 0);
	}
	
	@Override
	public void onSetupEnd() {
	}
	
	@Override
	public void notifySetupFinish(ICondVarReleaser condVarReleaser) {
		if(mCondVarToRelease != null) {
			condVarReleaser.release(mCondVarToRelease);
		}
	}
	
	@Override
	public void onSetupArgumentsParseFailed() {
		doDelete();
	}

	@Override
	public void onSetupArgumentsParsed() throws Exception {
		Object[] args = getArguments();
		if(args != null) {
			mCondVarToRelease = (CondVar) args[0];
			int numberOfSecondaryAgents = (Integer) args[1];
			createAndStartSecondaryAgents(numberOfSecondaryAgents);
		}
	}
	
	private void createAndStartSecondaryAgents(int numberOfSecondaryAgents) throws StaleProxyException {
		//Stop any secondary agents if applicable
		cleanSecondaryAgents();
		
		CondVar condVarToAcquire = new CondVar();
		condVarToAcquire.setReleaseThreshold(numberOfSecondaryAgents);
		
		for(int i = 0; i < numberOfSecondaryAgents; i++) {
			String secondaryAgentInstanceName = SECONDARY_AGENT_NAME_PREFIX + i;
			AgentController ac = getContainerController().createNewAgent(secondaryAgentInstanceName, getSecondaryAgentClassName(i), createSecondarySetupParams(condVarToAcquire));
			ac.start();
			mSecondaryAgentControllers.add(ac);
		}
		
		//Wait for all secondary agents start
		ICondVarAcquirer condVarAcquirer = new CondVarManager();
		condVarAcquirer.acquire(condVarToAcquire);
	}

	private void cleanSecondaryAgents() {
		mSecondaryAgentControllers.clear();
	}
	
	protected abstract String getSecondaryAgentClassName(int secondaryAgentId);
	protected abstract Object[] createSecondarySetupParams(CondVar condVarToAcquire);
	protected abstract Behaviour createBehaviourForCommand(Object command);
}
