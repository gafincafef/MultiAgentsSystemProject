package edu.rits.ma.jade.taskprocessor;

import jade.content.ContentElement;
import edu.rits.ma.jade.communication.AgentTrackingOntology;
import edu.rits.ma.jade.communication.ContentElementIncomingBuffer;
import edu.rits.ma.jade.communication.ContentElementOutcomingBuffer;
import edu.rits.ma.jade.communication.ContentElementWrapper;
import edu.rits.ma.jade.communication.SecondaryAgentState;

public class SecondaryContentElementBufferProcessorImpl implements IContentElementBufferProcessor {
	
	private static final int ACTION_PHASE_TO_WAIT = 0;
	private static final int ACTION_PHASE_TO_PROCESS_TASK_MESSAGE = 1;
	private static final int ACTION_PHASE_TO_STOP = 2;

	private int mInternalState = ACTION_PHASE_TO_WAIT;
	
	private String mPrimaryAgentName;
	private String mAgentName;
	
	public SecondaryContentElementBufferProcessorImpl(String primaryAgentName, String agentName) {
		mPrimaryAgentName = primaryAgentName;
		mAgentName = agentName;
	}
	
	@Override
	public void processCommunicationDataStore(ContentElementIncomingBuffer receiveBuffer, ContentElementOutcomingBuffer sendBuffer) {
		updateInternalState(receiveBuffer);
		int newInternalState = mInternalState;
		switch (mInternalState) {
		case ACTION_PHASE_TO_PROCESS_TASK_MESSAGE:
			newInternalState = onTaskAssigned(receiveBuffer, sendBuffer);
			break;
		default:
			break;
		}
		mInternalState = newInternalState;
	}
	
	@Override
	public boolean done() {
		return mInternalState == ACTION_PHASE_TO_STOP;
	}
	
	private int onTaskAssigned(ContentElementIncomingBuffer receiveBuffer, ContentElementOutcomingBuffer sendBuffer) {
		//TODO Retrieve task instance
		/*InProcessObjectMessage objectMessage = receiveBuffer.extractObjectReceived();
		ITask task = (ITask) objectMessage.getObject();
		task.execute();
		ACLMessage taskDoneMessage = createTaskDoneMessage();
		sendBuffer.addMessageToSend(taskDoneMessage);*/
				
		ContentElement taskDoneContentElement = createTaskDoneContentElement();
		ContentElementWrapper contentElementWrapper = new ContentElementWrapper(taskDoneContentElement, AgentTrackingOntology.ONTOLOGY_NAME);
		contentElementWrapper.addReceiverAgentName(mPrimaryAgentName);
		sendBuffer.addContentElementToSend(contentElementWrapper);
		
		return ACTION_PHASE_TO_WAIT;
	}

	private void updateInternalState(ContentElementIncomingBuffer receivedBuffer) {
		//TODO Implement
		/*if(receivedBuffer.hasReceivedData()) {
			if(receivedBuffer.getNumberOfReceivedInProcessObjects() > 0) {
				mInternalState = ACTION_PHASE_TO_PROCESS_TASK_MESSAGE;
			}
			else {
				if(receivedBuffer.getNumberOfReceivedMessages() > 0) {
					//TODO Check stop message
					mInternalState = ACTION_PHASE_TO_STOP;
				}
			}
		}
	}

	private SecondaryAgentState createTaskDoneContentElement() {
		SecondaryAgentState agentState = new SecondaryAgentState();
		agentState.setAgentName(mAgentName);
		agentState.setState(SecondaryAgentState.STATE_SUB_TASK_DONE);
		return agentState;
	}

}
