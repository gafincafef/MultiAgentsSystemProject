package edu.rits.ma.jade.communication;

import jade.lang.acl.ACLMessage;

import java.util.ArrayDeque;
import java.util.Deque;

public class CommunicationDataStore {
	public static final int STATE_NORMAL = 1;
	public static final int STATE_MESSAGE_RECEIVED = 2;
	public static final int STATE_MESSAGE_SEND = 3;
	
	private int mState = STATE_NORMAL;
	private Deque<ACLMessage> mReceivedMessages = new ArrayDeque<ACLMessage>();
	private Deque<ACLMessage> mMessagesToSend = new ArrayDeque<ACLMessage>();
	//private Deque<ObjectMessage> mReceivedObject = new ArrayDeque<ObjectMessage>();
	private Deque<ObjectMessage> mObjectsToSend = new ArrayDeque<ObjectMessage>();
	
	public int getState() {
		return mState;
	}

	public void setState(int state) {
		this.mState = state;
	}

	public void addReceivedMessage(ACLMessage receivedMessage) {
		mReceivedMessages.add(receivedMessage);
	}
	
	public ACLMessage extractReceivedMessage() {
		if(mReceivedMessages.isEmpty()) {
			return null;
		}
		return mReceivedMessages.pop();
	}
	
	public void addMessageToSend(ACLMessage receivedMessage) {
		mMessagesToSend.add(receivedMessage);
	}
	
	public ACLMessage extractMessageToSend() {
		if(mMessagesToSend.isEmpty()) {
			return null;
		}
		return mMessagesToSend.pop();
	}
	
	public void addObjectToSend(ObjectMessage objectMessage) {
		mObjectsToSend.add(objectMessage);
	}
	
	public ObjectMessage extractObjectToSend() {
		if(mObjectsToSend.isEmpty()) {
			return null;
		}
		return mObjectsToSend.pop();
	}
	
}
