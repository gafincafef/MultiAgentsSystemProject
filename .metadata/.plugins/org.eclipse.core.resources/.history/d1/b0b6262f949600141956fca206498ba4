package main;

import jade.core.Profile;
import jade.core.ProfileImpl;
import jade.core.Runtime;
import jade.wrapper.AgentController;
import jade.wrapper.AgentState;
import jade.wrapper.ContainerController;
import jade.wrapper.StaleProxyException;
import jade.wrapper.State;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		String host = "localhost";
		String port = "1099";
		String name = "scs";
		String className = "agents.SampleClientSideAgent";
		Object[] behaviours = null;
		System.out.println("Main thread " + Thread.currentThread().getId());
		AgentController ac = testCreateAgentInPeripheralContainer(host, port, name, className, behaviours);
		try {
			if(ac != null) {
				ac.start();
				while(showAndGetAgentControllerState(ac) == AgentState.cAGENT_STATE_IDLE) {
					ac.start();
				}
				showAndGetAgentControllerState(ac);
				testAgentCommunication(ac);
			}
		} 
		catch (StaleProxyException e) {
			e.printStackTrace();
		}
	}

	private static AgentController testCreateAgentInPeripheralContainer(String host, String port, String name, String className, Object[] behaviours) {
		// Retrieve the singleton instance of the JADE Runtime
		Runtime rt = Runtime.instance();

		// Create a container to host new agent
		Profile p = new ProfileImpl();
		p.setParameter(Profile.MAIN_HOST, host);
		p.setParameter(Profile.MAIN_PORT, port);
		ContainerController cc = rt.createAgentContainer(p);
		if(cc != null) {
			try {
				AgentController ac = cc.createNewAgent(name, className, behaviours);
				ac.start();
				return ac;
			} catch (StaleProxyException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	private static int showAndGetAgentControllerState(AgentController ac) {
		try {
			State acState = ac.getState();
			System.out.println("Agent controller state:" + acState.getCode() + " " + acState.getName());
			return acState.getCode();
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
		return -1;
	}

	private static void testAgentCommunication(AgentController ac) {
		try {
			System.out.println("Wait for first ACK");
			Integer firstACK = ac.getO2AInterface(Integer.class);
			while(firstACK == null) {
				firstACK = ac.getO2AInterface(Integer.class);
			}
			
			//Send an integer as request message in blocking mode
			ac.putO2AObject(12, AgentController.SYNC);

			//Wait a response (integer value) from agent
			int responseValue = ac.getO2AInterface(Integer.class);

			System.out.println("Response from agent " + responseValue);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
