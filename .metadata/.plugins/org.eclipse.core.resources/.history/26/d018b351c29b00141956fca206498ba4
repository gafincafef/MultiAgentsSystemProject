package edu.rits.ma.jade.behaviour;

import jade.core.Agent;
import jade.core.behaviours.Behaviour;
import jade.lang.acl.ACLMessage;
import jade.wrapper.AgentController;
import jade.wrapper.StaleProxyException;

import java.util.List;

import edu.rits.ma.jade.communication.CommunicationDataStore;
import edu.rits.ma.jade.communication.InProcessObjectMessage;

public class AgentCommunicatingBehaviour extends Behaviour {

	private static final long serialVersionUID = 2906637694654715113L;
	
	private CommunicationDataStore mCommunicationDataStore = new CommunicationDataStore();
	private ICommunicationDataStoreProcessor mProcessor;
	private List<AgentController> mAgentControllers;

	public AgentCommunicatingBehaviour(Agent agent, ICommunicationDataStoreProcessor processor, List<AgentController> agentControllers) {
		setAgent(agent);
		mProcessor = processor;
		mAgentControllers = agentControllers;
	}

	@Override
	public void action() {
		updateCommunicationDataStore();
		if(messageReceived()) {
			processCommunicationDataStore();
			if(hasMessageToSend()) {
				try {
					sendMessagesFromAgent();
				} catch (StaleProxyException e) {
					e.printStackTrace();
				}
			}
		}
		else {
			block();
		}
	}

	@Override
	public boolean done() {
		return mProcessor.done();
	}

	private void updateCommunicationDataStore() {
		//Receive ACL message
		ACLMessage message = getAgent().receive();
		
		//Receive in-process object via controller
		Object object = getAgent().getO2AObject();
		
		mCommunicationDataStore.setState(CommunicationDataStore.STATE_NONE);
		
		if(message != null || object != null) {
			mCommunicationDataStore.setState(CommunicationDataStore.STATE_MESSAGE_RECEIVED);
		}
		if(message != null) {
			mCommunicationDataStore.addReceivedMessage(message);
		}
		if(object != null) {
			InProcessObjectMessage objectMessage = (InProcessObjectMessage) object;
			mCommunicationDataStore.addReceivedObjectMessage(objectMessage);
		}
	}
							
	private boolean messageReceived() {
		return mCommunicationDataStore.getState() == CommunicationDataStore.STATE_MESSAGE_RECEIVED;
	}
								
	private void processCommunicationDataStore() {
		mProcessor.processCommunicationDataStore(mCommunicationDataStore);
	}

	private boolean hasMessageToSend() {
		return mCommunicationDataStore.getState() == CommunicationDataStore.STATE_TO_SEND_MESSAGE;
	}

	private void sendMessagesFromAgent() throws StaleProxyException {
		//Send ACL message
		ACLMessage messageToSend = mCommunicationDataStore.extractMessageToSend();
		while(messageToSend != null) {
			getAgent().send(messageToSend);
		}

		//Send in-process object to agent controllers
		InProcessObjectMessage objectMessage = mCommunicationDataStore.extractObjectToSend();
		for(AgentController ac : mAgentControllers) {
			if(ac.getName().equals(objectMessage.getTargetAgentName())) {
				ac.putO2AObject(objectMessage, AgentController.ASYNC);
			}
		}
	}
}
