package edu.rits.ma.algorithm.nashequil;

import java.util.List;

import edu.rits.ma.algorithm.theory.IPreference;
import edu.rits.ma.algorithm.theory.IUtilitiesMap;
import edu.rits.ma.common.abstr.ITask;

public class BestPreferenceCheckerTaskImpl implements ITask {

	private int mAgentId;
	private IUtilitiesMap mUtilitiesMap = null;
	private List<IPreference> mCandidatePreferences = null;
	
	public BestPreferenceCheckerTaskImpl(int agentId, List<IPreference> candidatePreferences, IUtilitiesMap utilitiesMap) {
		mAgentId = agentId;
		mUtilitiesMap = utilitiesMap;
		mCandidatePreferences = candidatePreferences;
	}
	
	@Override
	public long getTimeOutMs() {
		return -1;
	}

	@Override
	public void execute() {
		for(IPreference preference : mCandidatePreferences) {
			if(mUtilitiesMap.getUtilityOfAgent(preference, mAgentId)) {
				
			}
		}
	}

	@Override
	public int getStatus() {
		return 0;
	}

	@Override
	public Object[] getResults() {
		return null;
	}

	@Override
	public void createSubTasks(List<ITask> subTasks) {
		subTasks.clear();
	}

}
