package agent;

import java.util.Map;

import tasks.ITask;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.UnreadableException;

public class OntologyMessageReceiverAgent extends Agent{

	private static final long serialVersionUID = 7490980904997460253L;
	
	private static final String SERVICE_TYPE = "messageListener";
	
	@Override
	public void setup() {
		super.setup();
		System.out.println(this.class.getName() + " setup");
		registerService();
		addBehaviour(new CyclicBehaviour() {
			
			private static final long serialVersionUID = 2062374618180100562L;

			@Override
			public void action() {
				ACLMessage message = receive();
				if(message != null) {
					//Test retrieve object
					try {
						ITask task = (ITask) message.getContentObject();
						@SuppressWarnings("unchecked")
						Map<Integer, Integer> map = (Map<Integer, Integer>) task.getResults()[0];
						for(int k : map.keySet()) {
							System.out.println("K-V:" + k + " " + map.get(k));
						}
					} 
					catch (UnreadableException e) {
						e.printStackTrace();
					}
				}
				else {
					block();
				}
			}
		});
	}
	
	private void registerService() {
		DFAgentDescription dfd = new DFAgentDescription();
		dfd.setName(getAID());
		ServiceDescription sd = new ServiceDescription();
		sd.setType(SERVICE_TYPE);
		sd.setName(getLocalName() + "-" + SERVICE_TYPE); 
		dfd.addServices(sd);
		try {
			DFService.register(this, dfd);
		} catch (FIPAException e) {
			e.printStackTrace();
		}
	}
}
