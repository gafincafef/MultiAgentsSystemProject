package edu.rits.ma.jade.behaviour;

import jade.core.behaviours.Behaviour;
import jade.wrapper.AgentController;
import jade.wrapper.StaleProxyException;
import jade.wrapper.gateway.GatewayAgent;

import java.util.ArrayList;
import java.util.List;

import edu.rits.ma.common.ITask;
import edu.rits.ma.jade.model.IResponse;

public class PrimaryAgentBehaviour extends Behaviour {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8974716117508990142L;

	private Object mCommand;
	private List<ITask> mTasks = null;
	private List<AgentController> mSecondaryAgentControllers = null;
	private GatewayAgent mCallbackGateWayAgent;
	private int mNumberOfRemainingSubTasks = 0;
	
	@SuppressWarnings("unchecked")
	public PrimaryAgentBehaviour(Object command, List<AgentController> secondaryAgentControllers, GatewayAgent callbackGatewayAgent) {
		mTasks = (List<ITask>) mCommand;
		mSecondaryAgentControllers = secondaryAgentControllers;
		mCallbackGateWayAgent = callbackGatewayAgent;
	}
	
	@Override
	public void action() {
		try {
			//Run assigned tasks
			runTasks();
			
			//Wait for secondary agents report results of sub tasks
			waitForSubTasksOnSecondaryAgents();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public int onEnd() {
		//Command released
		mCallbackGateWayAgent.releaseCommand(mCommand);
		return super.onEnd();
	}
	
	public boolean done() {
		//Done if there is no sub tasks remaining
		return noSubTasks();
	}
	
	private void runTasks() throws StaleProxyException {
		for(ITask task : mTasks) {
			//Firstly execute the task assigned for primary agent
			task.execute();
			
			if(task.getStatus() == ITask.TASK_STATUS_SUCCEEDED) {
				List<ITask> subTasks = new ArrayList<ITask>();
				
				//Each task spawns a list of sub task after finished
				task.createSubTasks(subTasks);
				
				for(int i = 0; i < subTasks.size(); i++) {
					int secondaryAgentIndex = i;//TODO Tweak this logic. There may be different between sub task id and secondary agent id 
					assignSubTaskForSecondaryAgent(mSecondaryAgentControllers.get(secondaryAgentIndex), subTasks.get(i));
				}
			}
		}
	}
	
	private void waitForSubTasksOnSecondaryAgents() throws StaleProxyException {
		//Each secondary agent is expected to return number of sub task it completed, i.e. ideally 1
		for(AgentController ac : mSecondaryAgentControllers) {
			IResponse responseFromSecondaryAgent = ac.getO2AInterface(IResponse.class);
			if(responseFromSecondaryAgent != null) {
				onSubTaskCompleted();
			}
		}
	}

	private void assignSubTaskForSecondaryAgent(AgentController agentController, ITask subTask) throws StaleProxyException {
		agentController.putO2AObject(subTask, AgentController.ASYNC);
		onSubTaskCreated();
	}
	
	private void onSubTaskCreated() {
		mNumberOfRemainingSubTasks++;
	}
	
	private void onSubTaskCompleted() {
		mNumberOfRemainingSubTasks--;
	}
	
	private boolean noSubTasks() {
		return mNumberOfRemainingSubTasks <= 0;
	}
}
